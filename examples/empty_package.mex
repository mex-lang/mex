package Common;

model Point(Int, (Int, Int))
model Point(x: Int, y: (Int, Int))
model Point()

model Textarea[lines: Int = 3](String);

enum Password[len: Int = 12] {
    Open(String),
    Hashed(value: String[len=32], salt: String[len=5])
}

fragment AuditTrail<User, Instant> {
    created: (User, Instant),
    updated: (User, Instant)
}

fragment T {}

enum Status {
    Sub enum {
        Test
    }
}

model Name {
    f1: (Int, Int),
    f1: Test(Int, Int),
    f2: enum {
        A,
        B
    }
    f2: enum Test {
        A,
        B(int),
        C {
            x: Int
        }
    },
    f3: {
        x: Int,
        y: Int
    },
    f3: Test {
        x: Int,
        y: Int
    }
    ... AuditTrail
}

enum CommonStatus {
    Draft,
    Published(DateTime),
    Archived(DateTime),
    Test {
        x: Test
    }
}

package Test {
    model Name {}
}
package My
package My3 { }

package L2 {
    package L3 { }
    package L3 {
        package L4 {
            model Name
        }
        package L4 { }
    }
}

scalar String;
scalar Int;
scalar DateTime;
scalar Byte;